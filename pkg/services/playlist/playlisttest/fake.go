// Code generated by mockery v2.14.0. DO NOT EDIT.

package playlisttest

import (
	context "context"

	playlist "github.com/grafana/grafana/pkg/services/playlist"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *Service) Create(_a0 context.Context, _a1 *playlist.CreatePlaylistCommand) (*playlist.Playlist, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *playlist.Playlist
	if rf, ok := ret.Get(0).(func(context.Context, *playlist.CreatePlaylistCommand) *playlist.Playlist); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlist.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *playlist.CreatePlaylistCommand) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, cmd
func (_m *Service) Delete(ctx context.Context, cmd *playlist.DeletePlaylistCommand) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *playlist.DeletePlaylistCommand) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Service) Get(_a0 context.Context, _a1 *playlist.GetPlaylistByUidQuery) (*playlist.Playlist, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *playlist.Playlist
	if rf, ok := ret.Get(0).(func(context.Context, *playlist.GetPlaylistByUidQuery) *playlist.Playlist); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlist.Playlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *playlist.GetPlaylistByUidQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItems provides a mock function with given fields: _a0, _a1
func (_m *Service) GetItems(_a0 context.Context, _a1 *playlist.GetPlaylistItemsByUidQuery) ([]*playlist.PlaylistItem, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*playlist.PlaylistItem
	if rf, ok := ret.Get(0).(func(context.Context, *playlist.GetPlaylistItemsByUidQuery) []*playlist.PlaylistItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*playlist.PlaylistItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *playlist.GetPlaylistItemsByUidQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *Service) Search(_a0 context.Context, _a1 *playlist.GetPlaylistsQuery) (playlist.Playlists, error) {
	ret := _m.Called(_a0, _a1)

	var r0 playlist.Playlists
	if rf, ok := ret.Get(0).(func(context.Context, *playlist.GetPlaylistsQuery) playlist.Playlists); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playlist.Playlists)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *playlist.GetPlaylistsQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *Service) Update(_a0 context.Context, _a1 *playlist.UpdatePlaylistCommand) (*playlist.PlaylistDTO, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *playlist.PlaylistDTO
	if rf, ok := ret.Get(0).(func(context.Context, *playlist.UpdatePlaylistCommand) *playlist.PlaylistDTO); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playlist.PlaylistDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *playlist.UpdatePlaylistCommand) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
